import pandapower as pp


def get_power_dict():
    """Creates a dictionary of major power system components in a network.
    Used for naming automatically generated networks.

    Returns:
        [dictionary of string: string] -- Mapping of infrastructure component abbreviations to names.
    """
    #{Acronym: [pandapower name, cctual name, column for nearest node]}
    power_dict = {'B':  ['bus', 'Bus', 'name'],
                  'L':  ['load', 'Load', 'bus'], 
                  'SG': ['sgen', 'Static Generator', 'bus'],
                  'MP':  ['motor', 'Motor', 'bus'], 
                  'AL': ['asymmetric_load', 'Asymmetric Load', 'bus'], 
                  'AS': ['asymmetric_sgen', 'Asymmetric Static Generator', 'bus'], 
                  'ST': ['storage', 'Storage', 'bus'], 
                  'G':  ['gen', 'Generator', 'bus'], 
                  'SW': ['switch', 'Switch', 'bus'],
                  'SH': ['shunt', 'Shunt', 'bus'],
                  'EG': ['ext_grid', 'External Grid', 'bus'],
                  'L':  ['line', 'Line', 'from_bus'],
                  'TF': ['trafo', 'Transformer', 'hv_bus'],
                  'TH': ['trafo3w',  'Three Phase Transformer', 'hv_bus'],
                  'I':  ['impedance', 'Impedance', 'from_bus'],
                  'DL': ['dcline', 'DC Line', 'from_bus']
    }
    return power_dict

def load_power_network(network_json):
    """Loads the power system model from a *.json file.

    Arguments:
        network_inp {string} -- Location of the *.json power system file generated by pandapower package.

    Returns:
        object -- The loaded power system model object.
    """
    pn = pp.from_json(network_json, convert=True)
    print('Power system successfully loaded from {}'.format(network_json))
    return pn


def run_power_simulation(pn):
    """Runs the power flow model for an instance.

    Arguments:
        pn {object} -- A power system model object generated by pandapower package.
    """
    pn_sim = pp.runpp(pn)


